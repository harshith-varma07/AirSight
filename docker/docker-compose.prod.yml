version: '3.8'

# Production overrides for AirSight
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # MySQL Production Configuration
  mysql:
    restart: always
    environment:
      MYSQL_DATABASE: airqualitydb
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      TZ: ${TZ:-UTC}
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - mysql_config_prod:/etc/mysql/conf.d
      - ./database_setup.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./mysql-prod.cnf:/etc/mysql/conf.d/prod.cnf:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=512M
      --innodb-log-file-size=128M
      --max-connections=200
      --slow-query-log=1
      --long-query-time=2
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Production Configuration
  redis:
    restart: always
    environment:
      TZ: ${TZ:-UTC}
    volumes:
      - redis_data_prod:/data
      - ./redis-prod.conf:/etc/redis.conf:ro
    command: redis-server /etc/redis.conf --appendonly yes --save 900 1 --save 300 10 --save 60 10000
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # AirSight Application Production Configuration
  app:
    restart: always
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: production
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/airqualitydb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_CACHE_TYPE: redis
      
      # Performance Settings
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE: 50
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS: true
      SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES: true
      
      # External APIs
      OPENAQ_API_KEY: ${OPENAQ_API_KEY:-}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID:-}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN:-}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER:-}
      
      # Logging
      LOGGING_LEVEL_COM_AIR_AIRQUALITY: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: WARN
      LOGGING_LEVEL_ORG_HIBERNATE: WARN
      
      # Security
      SPRING_SECURITY_USER_NAME: ${ADMIN_USERNAME:-admin}
      SPRING_SECURITY_USER_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      
      # JVM Settings
      JAVA_OPTS: ${JAVA_OPTS:--Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app/logs/}
      
      # Timezone
      TZ: ${TZ:-UTC}
      
    volumes:
      - app_logs_prod:/app/logs
      - app_heapdumps:/app/heapdumps
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health/readiness"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M

  # Nginx Production Configuration
  nginx:
    restart: always
    environment:
      TZ: ${TZ:-UTC}
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Log Management Service (Optional)
  logrotate:
    image: linkyard/docker-logrotate
    container_name: airsight-logrotate
    restart: unless-stopped
    volumes:
      - app_logs_prod:/logs/app
      - nginx_logs:/logs/nginx
      - mysql_logs:/logs/mysql
      - ./logrotate.conf:/etc/logrotate.conf:ro
    environment:
      LOGS_DIRECTORIES: "/logs"
      LOGROTATE_INTERVAL: daily
    profiles:
      - production

volumes:
  mysql_data_prod:
    driver: local
  mysql_config_prod:
    driver: local
  redis_data_prod:
    driver: local
  app_logs_prod:
    driver: local
  app_heapdumps:
    driver: local
  nginx_logs:
    driver: local
  mysql_logs:
    driver: local
